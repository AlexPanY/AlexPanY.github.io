<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tags on 文成思宇</title>
    <link>https://alexpany.github.io/tags/</link>
    <description>Recent content in Tags on 文成思宇</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
        <atom:link href="https://alexpany.github.io/tags/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 基础 - Map</title>
      <link>https://alexpany.github.io/golang/hashmap/</link>
      <pubDate>Fri, 05 Feb 2021 15:34:16 +0800</pubDate>
      
      <guid>https://alexpany.github.io/golang/hashmap/</guid>
      <description>&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&#34;哈希表hash-table&#34;&gt;哈希表（Hash Table）&lt;/h1&gt;
&lt;h2 id=&#34;概述overview&#34;&gt;概述（Overview）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;哈希表（Hash Table）&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 又称 &lt;strong&gt;&lt;code&gt;散列表&lt;/code&gt;&lt;/strong&gt;，是一种实现关联数组抽象数据类型的数据结构，这种结构可以将 &lt;strong&gt;&lt;code&gt;键（Key）&lt;/code&gt;&lt;/strong&gt; 映射到 &lt;strong&gt;&lt;code&gt;值（Value）&lt;/code&gt;&lt;/strong&gt; 上或者说所对应的 &lt;strong&gt;&lt;code&gt;存储地址（Addr）&lt;/code&gt;&lt;/strong&gt; 上。&lt;/p&gt;
&lt;p&gt;那么把关键字（Key）映射到对应的存储地址上的函数称为 &lt;strong&gt;&lt;code&gt;哈希函数（hash function）&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;理想情况下 &lt;strong&gt;&lt;code&gt;哈希函数（hash function）&lt;/code&gt;&lt;/strong&gt; 会将每个 &lt;strong&gt;&lt;code&gt;键（Key）&lt;/code&gt;&lt;/strong&gt; 均匀的分配到不同的地址中，但是由于在设计 &lt;strong&gt;&lt;code&gt;哈希函数（hash function）&lt;/code&gt;&lt;/strong&gt; 过程中以及哈希输入 &lt;strong&gt;&lt;code&gt;键（Key）&lt;/code&gt;&lt;/strong&gt; 的范围通常大于输出范围，可能会导致两个或两个以上的 &lt;strong&gt;&lt;code&gt;键（Key）&lt;/code&gt;&lt;/strong&gt; 生成了相同的索引，造成不同的关键字映射上到同一地址上，我们将这种情况称为 &lt;strong&gt;&lt;code&gt;冲突（collision）&lt;/code&gt;&lt;/strong&gt;，而这些发生碰撞的关键字（key）我们称为 &lt;strong&gt;&lt;code&gt;同义词&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;设计思路&#34;&gt;设计思路&lt;/h2&gt;
&lt;p&gt;想要实现一个性能优异的哈希表，有两个核心点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计哈希构造函数；&lt;/li&gt;
&lt;li&gt;解决哈希冲突的方法；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成以上两点可以很体现散列 &lt;strong&gt;&lt;em&gt;O&lt;/em&gt;(1)&lt;/strong&gt; 的读写性能。&lt;/p&gt;
&lt;h3 id=&#34;哈希函数构造方法&#34;&gt;哈希函数构造方法&lt;/h3&gt;
&lt;h4 id=&#34;直接定址法&#34;&gt;直接定址法&lt;/h4&gt;
&lt;p&gt;直接将 &lt;strong&gt;&lt;code&gt;关键字（key）&lt;/code&gt;&lt;/strong&gt; 通过某个线性函数计算出的值作为散列地址。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f(key) = a * key + b (其中a和b都是常数)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：适合可确定关键字范围，查较小找表。关键字是连续的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：简单，散列均匀，不会产生冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：需要知道关键字的分布，当关键字不连续会造成较大的空间浪费。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：统计 1990 年后出生的人口数分布，如下表：
散列地址 | 出生年份 | 人数
:&amp;mdash;:|:&amp;mdash;:|:&amp;mdash;:
0 | 1990 | 1200 万
1 | 1991 | 1500 万
2 | 1992 | 1800 万
&amp;hellip; | &amp;hellip; | &amp;hellip;
20 | 2010 | 600 万&lt;/p&gt;
&lt;p&gt;我们可以通过出生年份作为关键字，&lt;code&gt;Hash(key) = key - 1990&lt;/code&gt;，那么当&lt;code&gt;key=1992&lt;/code&gt;年的时候，那么 hash(1992) = 1992 - 1990 = 2 ，那么 等于 2 的散列地址中值为 1800 万。&lt;/p&gt;
&lt;h4 id=&#34;除留余数法&#34;&gt;除留余数法&lt;/h4&gt;
&lt;p&gt;假定已知散列表长度为 &lt;code&gt;M&lt;/code&gt;，取一个不大于但最近于或等于长度 M 的 &lt;strong&gt;&lt;code&gt;质数P&lt;/code&gt;&lt;/strong&gt;，利用取模的方式计算散列存储地址，该方法的核心在于 &lt;strong&gt;&lt;code&gt;质数P&lt;/code&gt;&lt;/strong&gt; 的取值，取值不当容易造成同义词。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f(key) = key mode  P (P &amp;lt;= M)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：适合可确定关键字范围，查较小找表。关键字是连续的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：简单，适用范围广，是最常使用的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：需要已知散列长度，计算质数的选取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：假定散列长度 &lt;strong&gt;&lt;code&gt;M = 10&lt;/code&gt;&lt;/strong&gt;，我们取离 10 最近的质数，&lt;strong&gt;&lt;code&gt;质数P = 7&lt;/code&gt;&lt;/strong&gt; ，在通过取模方式来计算散列地址，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://note.youdao.com/yws/api/personal/file/WEBbdba76433d549a91a1f1ff43a991adaf?method=download&amp;amp;shareKey=94ba006e82341af9c344430185642d3a&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;h4 id=&#34;数字分析法&#34;&gt;数字分析法&lt;/h4&gt;
&lt;p&gt;当 &lt;strong&gt;&lt;code&gt;关键字（key）&lt;/code&gt;&lt;/strong&gt; 是数值型或者说是进制（如二进制、十进制） ，分析关键字各个位的分布情况，丢掉分布不均匀的位，抽取较为均匀位用来计算存储位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：适用于关键较长，且对关键字已知的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：设计简单，散列均匀，不会产生冲突。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：当关键字不连续会造成较大的空间浪费&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：假设我们有一组 NUM1 ~ NUM100 的数据，如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;编号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;关键字&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;截取后&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB912342001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;123421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB919851002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;198512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB923678003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;236783&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB984736004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;847364&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&amp;hellip;&amp;hellip;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;hellip;&amp;hellip;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&amp;hellip;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM98&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB936132098&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;361328&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM99&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB975127099&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;751279&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;NUM100&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;KB951127100&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;511270&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通过分析我们得出，&lt;strong&gt;&lt;code&gt;关键字（key）&lt;/code&gt;&lt;/strong&gt; 有 11 位组成，其中前三位和倒数 2，3 位出现相同数字出现相同概率较大，分布不均，则被我们丢弃，我们选择 4 到 8 位以及最后一位作为哈希值。&lt;/p&gt;
&lt;h4 id=&#34;平方取中法&#34;&gt;平方取中法&lt;/h4&gt;
&lt;p&gt;将 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt; 先平方，然后根据可使用空间的大小，选取平方数是中间几位为散列存储地址。具体中间取几位，则根据实际情况来定，这种方法的散列地址与关键字的每一位都有关系，使得散列相对比较均匀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：适合用于不知道关键词分布，且关键字位数不长的情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：设有一组关键字值如下，假设可利用地址空间大小为 1024，平方后取平方数的中间三位作为相当记录的存储地址。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;关键字&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;转码&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;转码的平方&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;散列地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ABC&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;010203&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0104101209&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;BCD&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;020304&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0412252416&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;252&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CDE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;030405&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0924464025&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;464&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DEF&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;040506&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1640736036&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;736&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;折叠法&#34;&gt;折叠法&lt;/h4&gt;
&lt;p&gt;将 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt; 分割成位数相同的几部分（由于关键字长度的问题可能最后分割的位数会少点），然后取这几部分的叠加和（舍去进位）作为散列存储地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;场景&lt;/strong&gt;：这种方法适用于关键字位数较多，而且关键字中每一位上数字分布大致均匀的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：&lt;/p&gt;
&lt;h4 id=&#34;伪随机数法&#34;&gt;伪随机数法&lt;/h4&gt;
&lt;p&gt;伪随机数法是将利用数据的键值经过随机数法的运算后的结果作为数据存储的位置。其公式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f(key) = (a * Key + b) mod ArrayLength （a、b为质数）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;举例&lt;/strong&gt;：某中学，学生编号为：980541，学生共有 798 个，那么我们假设 a = 13 b = 7，根据公式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f(980541) = (13 * 980541 + 7) % 980541 = 7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;则该学生数据存储在 7 位置&lt;/p&gt;
&lt;h3 id=&#34;哈希冲突处理方法&#34;&gt;哈希冲突处理方法&lt;/h3&gt;
&lt;p&gt;常用的哈希函数构造方法&lt;/p&gt;
&lt;h4 id=&#34;开放定址法&#34;&gt;开放定址法&lt;/h4&gt;
&lt;p&gt;将冲突的哈希地址作为自变量，通过某种冲突解决函数获得新的空闲哈希地址方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;核心思想&lt;/strong&gt;：当某一记录的 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt; 的初始哈希散列地址 &lt;strong&gt;&lt;code&gt;h0 = H(key)&lt;/code&gt;&lt;/strong&gt; 发生冲突时，以 &lt;strong&gt;&lt;code&gt;H0&lt;/code&gt;&lt;/strong&gt; 为基础，采取合适的方法计算得到新的哈希散列地址 &lt;strong&gt;&lt;code&gt;H1&lt;/code&gt;&lt;/strong&gt;，如果 &lt;strong&gt;&lt;code&gt;H1&lt;/code&gt;&lt;/strong&gt; 仍然发生冲突，在以 &lt;strong&gt;&lt;code&gt;H1&lt;/code&gt;&lt;/strong&gt; 为基础，继续探测，直到获得一个不发生冲突的散列地址 &lt;strong&gt;&lt;code&gt;Hn&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;探测&lt;/strong&gt;：通常寻找下一个不冲突空的散列地址的过程。&lt;/p&gt;
&lt;h5 id=&#34;线性探测法&#34;&gt;线性探测法&lt;/h5&gt;
&lt;p&gt;当发生冲突时，顺序的去查看表中下一个单元（当探测到表尾时，下一个探测地址从表的首地址开始）,直到找到可用的空闲单元（前提是表没有被装满）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;探测公式: &lt;strong&gt;D(i) = D(i-1) % M (1&lt;code&gt;$\leq$&lt;/code&gt; i &lt;code&gt;$\leq$&lt;/code&gt;M-1)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线性探测方法会造成大量元素在相邻的散列地址上聚集（堆积），增加了查找的次数，大大降低了查找性能。&lt;/p&gt;
&lt;h5 id=&#34;平方探测法&#34;&gt;平方探测法&lt;/h5&gt;
&lt;p&gt;当发生冲突时，冲突地址为 &lt;strong&gt;&lt;code&gt;D(0)&lt;/code&gt;&lt;/strong&gt;，根据平方探测法得到新的访问地址，地址序列大概如下：D(0)+ &lt;code&gt;$1^2$&lt;/code&gt;, D(0)+&lt;code&gt;$-1^2$&lt;/code&gt;, D(0)+&lt;code&gt;$-1^2$&lt;/code&gt;,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;探测公式: &lt;strong&gt;D(i) = D(0)+ &lt;code&gt;$-1^2$&lt;/code&gt;, D(i)+ &lt;code&gt;$-1^2$&lt;/code&gt;,&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;平方探测烦方法会解决散列地址堆积的问题，但是由于平方的操作，会导致地址之间的间隔较大，不能完整全探测到所有散列地址。&lt;/p&gt;
&lt;h5 id=&#34;再散列探测方法&#34;&gt;再散列探测方法&lt;/h5&gt;
&lt;p&gt;再散列探测方法 又称（&lt;strong&gt;双散列方法&lt;/strong&gt;），需要使用两个哈希函数，当通过第一个哈希函数计算的散列地址发生冲突的时，再利用第二个散列函数计算 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt; 的 &lt;strong&gt;&lt;code&gt;地址增量&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;探测公式: &lt;strong&gt;D&lt;sub&gt;i&lt;/sub&gt; = (F(key) + i x F2(key)) % M&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;( &lt;strong&gt;i&lt;/strong&gt; 是冲突次数，初始为 0， &lt;strong&gt;M&lt;/strong&gt; 为散列长度)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;伪随机探测法&#34;&gt;伪随机探测法&lt;/h5&gt;
&lt;br&gt;
&lt;h4 id=&#34;拉链地址法&#34;&gt;拉链地址法&lt;/h4&gt;
&lt;p&gt;对于不同 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt; 通过哈希函数会映射到同一个散列地址上，为了避免这样 &lt;strong&gt;&lt;code&gt;同义词&lt;/code&gt;&lt;/strong&gt; 发生冲突，将具有相同散列地址的 &lt;strong&gt;&lt;code&gt;同义词&lt;/code&gt;&lt;/strong&gt; 存放到一个 &lt;strong&gt;&lt;code&gt;线性链表&lt;/code&gt;&lt;/strong&gt; 中，称为 &lt;strong&gt;&lt;code&gt;同义词链表&lt;/code&gt;&lt;/strong&gt;，同时用散列地址存放 &lt;strong&gt;&lt;code&gt;同义词链表&lt;/code&gt;&lt;/strong&gt; 的头指针。&lt;/p&gt;
&lt;p&gt;我们通过一个示例，来看下使用拉链法，的散列结构：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例：&lt;/strong&gt; 已知一组关键字为 &lt;strong&gt;[19、14、23、01、68、20、84、27、55、11、10、79]&lt;/strong&gt;，设散列函数为 &lt;strong&gt;&lt;code&gt;F(key) = key mode 13&lt;/code&gt;&lt;/strong&gt;。使用拉链地址法处理哈希冲突，构造对应散列。&lt;/p&gt;
&lt;p&gt;构建后散列，如图所示：&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://note.youdao.com/yws/api/personal/file/WEBdba78ed25a5053c4ac0ef5e162005c8c?method=download&amp;amp;shareKey=24edb089c27563cc6d5da3a35e922b4c&#34;
        alt=&#34;image&#34;/&gt;&lt;/p&gt;
&lt;h3 id=&#34;哈希表的查找&#34;&gt;哈希表的查找&lt;/h3&gt;
&lt;p&gt;哈希表的查找过程，类似于哈希表的构造，大致过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先根据给定的 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt;，通过哈希函数计算出对应散列地址，并判断该散列地址是否存在
&lt;ul&gt;
&lt;li&gt;如果没有，则说没找到对应的 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt;，直接返回查找失败；&lt;/li&gt;
&lt;li&gt;如果有，则检查 &lt;strong&gt;&lt;code&gt;关键字（Key）&lt;/code&gt;&lt;/strong&gt;是否与之匹配；
&lt;ul&gt;
&lt;li&gt;如果匹配成功，返回查找结果；&lt;/li&gt;
&lt;li&gt;如果匹配不成功，则按照给定冲突解决方法计算出下一个散列地址，在按照上面的流程在走一遍，直到匹配成功（可能最终也没有找到匹配的关键字，则返回查找失败）；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;哈希表的查找性能&#34;&gt;哈希表的查找性能&lt;/h4&gt;
&lt;p&gt;通过上面的哈希表查找的流程可以看出，在整个查找过程，仍然是通过给定具体的值和目标值进行比对，那么比对次数是基于哈希表三个重要因数，即：&lt;strong&gt;&lt;code&gt;哈希函数&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;处理冲突的方法&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;装填因子&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;装填因子（load factor）&lt;/code&gt;：&lt;/strong&gt; 一般记做 &lt;strong&gt;&lt;code&gt;$\alpha$&lt;/code&gt;&lt;/strong&gt;，表示了一个散列表中装满的程度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$\alpha$&lt;/code&gt;&lt;/strong&gt; = &lt;strong&gt;表中填入的记录数&lt;/strong&gt; / &lt;strong&gt;散列表的长度&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;平均查找长度（Average Search Length，ASL）：&lt;/strong&gt; 在查找运算中，由于所费时间在关键字的比较上，所以把平均需要和待查找值比较的关键字次数称为平均查找长度&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1 id=&#34;gos-mapgo-hash-table&#34;&gt;Go&amp;rsquo;s Map（Go Hash Table）&lt;/h1&gt;
&lt;p&gt;OK，通过上面的对哈希表一些简单的介绍，以及常用的操作等，那么我们现在对哈希表有一定的了解了，接下来我们就开始聊聊 Go 中 &lt;strong&gt;&lt;code&gt;hashmap&lt;/code&gt;&lt;/strong&gt; 的实现。&lt;/p&gt;
&lt;h2 id=&#34;数据结构struct&#34;&gt;数据结构（Struct）&lt;/h2&gt;
&lt;p&gt;我们先从 &lt;strong&gt;&lt;code&gt;hashmap&lt;/code&gt;&lt;/strong&gt; 的数据结构实现来说，Go 中将 &lt;strong&gt;&lt;code&gt;hashmap&lt;/code&gt;&lt;/strong&gt; 定义成了&lt;a href=&#34;https://github.com/golang/go/blob/ccb2e906882e45fe2d22c31049185208adbfb62e/src/runtime/map.go#L115&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;runtime.hmap&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 的结构，那么我们通过源码分析来看下 &lt;a href=&#34;https://github.com/golang/go/blob/ccb2e906882e45fe2d22c31049185208adbfb62e/src/runtime/map.go#L115&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;runtime.hmap&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 的内部字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hmap&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;            &lt;span class=&#34;c1&#34;&gt;// 表示当前哈希表中的元素数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;flags&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 表示当前哈希表持有的 buckets 数量，但是因为哈希表中桶的数量都 2 的倍数，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 所以该字段会存储对数，也就是 len(buckets) == 2^B；
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;          &lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;noverflow&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;uint16&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// overflow 的 bucket 近似数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;//是哈希的种子，它能为哈希函数的结果引入随机性，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;//这个值在创建哈希表时确定，并在调用哈希函数时作为参数传入
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;hash0&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 2^B存储桶数组。如果计数==0，则可能为零
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 是哈希在扩容时用于保存之前 buckets 的字段，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 扩容的时候，buckets 长度会是 oldbuckets 的两倍
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;oldbuckets&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 指示扩容进度，小于此地址的 buckets 迁移完成
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;nevacuate&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;extra&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mapextra&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mapextra&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// overflow 包含的是 hmap.buckets 的 overflow 的 bucket
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;overflow&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// oldoverflow 包含扩容时的 hmap.oldbuckets 的 overflow 的 bucket
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;oldoverflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// 指向空闲的 overflow bucket 的指针
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基本的同结构 &lt;a href=&#34;https://github.com/golang/go/blob/824f2d635ca96a7bded6ed039f8a9c0f06ee1443/src/runtime/map.go#L148&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;runtime.bmap&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;bucketCntBits&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;bucketCnt&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bucketCntBits&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 8
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;//bmap 是 hmap 中的 bucket
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// tophash 是 hash 值的高 8 位
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;tophash&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucketCnt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行期间，Go 通过
&lt;a href=&#34;https://github.com/golang/go/blob/be64a19d99918c843f8555aad580221207ea35bc/src/cmd/compile/internal/gc/reflect.go#L81&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;gc.reflect.bmap()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 去重建了 &lt;code&gt;bmap&lt;/code&gt; 结构如下，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;topbits&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;keys&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;keytype&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;valuetype&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;pad&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;overflow&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uintptr&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;h2 id=&#34;初始化init&#34;&gt;初始化（Init）&lt;/h2&gt;
&lt;h3 id=&#34;字面量&#34;&gt;字面量&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;alex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;s&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;18&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;makemapkvhint-关键字&#34;&gt;&lt;code&gt;make(map[k]v，hint)&lt;/code&gt; 关键字&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;make&lt;/code&gt;的创建 map 实例的时候，会调用 &lt;a href=&#34;https://github.com/golang/go/blob/824f2d635ca96a7bded6ed039f8a9c0f06ee1443/src/runtime/map.go#L303&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;runtime.makemap()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 去实现的，那么我着手去分析下 &lt;a href=&#34;https://github.com/golang/go/blob/824f2d635ca96a7bded6ed039f8a9c0f06ee1443/src/runtime/map.go#L303&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;runtime.makemap()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 的源代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;makemap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maptype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hint&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hmap&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 通过阶乘方式计算，内存大小是否有溢出
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;overflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;MulUintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;overflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;maxAlloc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;hint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 初始化 runtime.hmap 结构
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// 设置 hash 随机种子
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hash0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fastrand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 计算最小需要 Bucket 数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// overLoadFactor 比较了桶的装载因子是否超过负载系数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;overLoadFactor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 分配初始化哈希表，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;// 创建用于保存桶的数组
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;makeBucketArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extra&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mapextra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extra&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里有个小细节点经常会被忽略，那就是我们在创建的 &lt;strong&gt;&lt;code&gt;map&lt;/code&gt;&lt;/strong&gt; 的时候，由于&lt;a href=&#34;https://github.com/golang/go/blob/824f2d635ca96a7bded6ed039f8a9c0f06ee1443/src/runtime/map.go#L303&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;strong&gt;&lt;code&gt;runtime.makemap()&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;
 返回的是 &lt;strong&gt;&lt;code&gt;*hmap&lt;/code&gt;&lt;/strong&gt;，所以呢我们在操作的时候，其实会影响原数据，特别是将 &lt;strong&gt;&lt;code&gt;map&lt;/code&gt;&lt;/strong&gt; 作为某个函数参数，函数内部对 &lt;strong&gt;&lt;code&gt;map&lt;/code&gt;&lt;/strong&gt; 的操作，会影响到实参的变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/golang/go/blob/824f2d635ca96a7bded6ed039f8a9c0f06ee1443/src/runtime/map.go#L344&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;runtime.makeBucketArray()&lt;/a&gt;
&lt;/strong&gt; 会根据传入的 B 计算出的需要创建的桶数量并在内存中分配一片连续的空间用于存储数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;makeBucketArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maptype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dirtyalloc&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Pointer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//通过 1 &amp;lt;&amp;lt; b 计算桶数
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bucketShift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 对于 b &amp;gt;= 4 or base &amp;gt;= 16, 需要额外开辟空间
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 开辟的空间是基于 nbuckets = base数量 + 新增(b-4)平方的 nbuckets数量
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 内存大小向上取整后，如果向上取整后的内存大小与之前计算的有差异，
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 则nbuckets数量等于向上取整后内存大小整取当个bucket大小
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bucketShift&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;sz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;roundupsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sz&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dirtyalloc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;newarray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dirtyalloc&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ptrdata&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nf&#34;&gt;memclrHasPointers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;nf&#34;&gt;memclrNoHeapPointers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// 当传入所需的桶数小于计算得出桶数,就说明桶有溢出的情况
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 则需要预先分配一些溢出桶
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucketsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nbuckets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;uintptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bucketsize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;setoverflow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;buckets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;nextOverflow&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;根据 &lt;strong&gt;&lt;a href=&#34;https://github.com/golang/go/blob/824f2d635ca96a7bded6ed039f8a9c0f06ee1443/src/runtime/map.go#L344&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;runtime.makeBucketArray()&lt;/a&gt;
&lt;/strong&gt; 的源代码分析可以得出，以下结论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当桶的数量小于 &lt;strong&gt;2&lt;sup&gt;4&lt;/sup&gt;&lt;/strong&gt; 时，由于数据较少、使用溢出桶的可能性较低，会省略创建的过程以减少额外开销；&lt;/li&gt;
&lt;li&gt;当桶的数量多于 &lt;strong&gt;2&lt;sup&gt;4&lt;/sup&gt;&lt;/strong&gt; 时，会额外创建 &lt;strong&gt;2 &lt;sup&gt;B-4&lt;/sup&gt;&lt;/strong&gt; 个溢出桶；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据上述代码，我们能确定在正常情况下，正常桶和溢出桶在内存中的存储空间是连续的，只是被 &lt;code&gt;runtime.hmap&lt;/code&gt; 中的不同字段引用，当溢出桶数量较多时会通过 &lt;code&gt;runtime.newobject&lt;/code&gt; 创建新的溢出桶。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;操作&#34;&gt;操作&lt;/h2&gt;
&lt;h3 id=&#34;读写&#34;&gt;读写&lt;/h3&gt;
&lt;h3 id=&#34;扩容&#34;&gt;扩容&lt;/h3&gt;
&lt;h3 id=&#34;删除&#34;&gt;删除&lt;/h3&gt;
&lt;h2 id=&#34;碰到问题&#34;&gt;碰到问题&lt;/h2&gt;
&lt;h3 id=&#34;并发安全&#34;&gt;并发安全&lt;/h3&gt;
&lt;h2 id=&#34;整理总结&#34;&gt;整理总结&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>